name: API and App Deploy

on:
  push:
    branches:
      - main  # Trigger workflow on push to the main branch

# Add concurrency control to cancel any in-progress workflows on the same branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  API:
    # Change from ubuntu-latest to ubuntu-latest-16-core for faster performance
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 1  # Shallow clone for faster checkout

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: './api/package-lock.json'

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add SSH known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -t rsa 178.156.135.15 >> ~/.ssh/known_hosts

      # Deploy API to Hetzner VPS with optimized rsync
      - name: Deploy and Build API on Hetzner VPS
        run: |
          # Use compression and faster algorithms for rsync
          rsync -az --compress-level=9 --exclude '.git*' --exclude 'node_modules' ./api/ root@178.156.135.15:/var/www/test-folder/api

          # SSH into Hetzner with optimized connection settings
          ssh -o BatchMode=yes -o ConnectTimeout=10 root@178.156.135.15 << 'EOF'
            # Navigate to the API folder
            cd /var/www/test-folder/api

            # Create the dist directory if it doesn't exist
            mkdir -p dist

            # Check if node_modules exists and only install if needed
            if [ ! -d "node_modules" ] || [ ! -f "node_modules/.package-lock.json" ] || [ "package-lock.json" -nt "node_modules/.package-lock.json" ]; then
              echo "Installing dependencies..."
              npm ci --prefer-offline --no-audit
              touch node_modules/.package-lock.json
            else
              echo "Dependencies are up to date, skipping installation"
            fi

            # Build the API with optimized settings
            NODE_ENV=production npm run build

            # Check if build was successful, then start the server
            if [ $? -eq 0 ]; then
              pm2 restart backend || pm2 start server.ts --name backend --watch
            else
              echo "Build failed, not starting the server."
              exit 1
            fi

            # Copy email templates to dist folder
            mkdir -p dist/email-templates
            cp -R ./email-templates dist/email-templates
          EOF
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

  APP:
    # Change from ubuntu-latest to ubuntu-latest-16-core for faster performance
    runs-on: ubuntu-latest
    # Run in parallel with API job instead of waiting for it
    # needs: API  # Removed dependency for parallel execution

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 1  # Shallow clone for faster checkout

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: './app/package-lock.json'

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add SSH known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -t rsa 178.156.135.15 >> ~/.ssh/known_hosts

      # Deploy App to Hetzner VPS with optimized rsync
      - name: Deploy and Build App on Hetzner VPS
        run: |
          # Use compression and faster algorithms for rsync
          rsync -az --compress-level=9 --exclude '.git*' --exclude 'node_modules' ./app/ root@178.156.135.15:/var/www/test-folder/app

          # SSH into Hetzner with optimized connection settings
          ssh -o BatchMode=yes -o ConnectTimeout=10 root@178.156.135.15 << 'EOF'
            # Navigate to the App folder
            cd /var/www/test-folder/app

            # Create the dist directory if it doesn't exist
            mkdir -p dist

            # Check if node_modules exists and only install if needed
            if [ ! -d "node_modules" ] || [ ! -f "node_modules/.package-lock.json" ] || [ "package-lock.json" -nt "node_modules/.package-lock.json" ]; then
              echo "Installing dependencies..."
              npm ci --prefer-offline --no-audit
              touch node_modules/.package-lock.json
            else
              echo "Dependencies are up to date, skipping installation"
            fi

            # Build the App with production settings
            NODE_ENV=production npm run build --no-audit

          EOF
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
