/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "\n  query getAccessibilityReport($url: String!) {\n    getAccessibilityReport(url: $url) {\n      axe {\n        errors {\n          message\n          context\n          selectors\n          impact\n          description\n          help\n          screenshotUrl\n        }\n        notices {\n          message\n          context\n          selectors\n          impact\n          description\n          help\n          screenshotUrl\n        }\n        warnings {\n          message\n          context\n          selectors\n          impact\n          description\n          help\n          screenshotUrl\n        }\n      }\n      htmlcs {\n        errors {\n          code\n          message\n          context\n          selectors\n          description\n          recommended_action\n          screenshotUrl\n        }\n        notices {\n          code\n          message\n          context\n          selectors\n          description\n          recommended_action\n          screenshotUrl\n        }\n        warnings {\n          code\n          message\n          context\n          selectors\n          description\n          recommended_action\n          screenshotUrl\n        }\n      }\n      score\n      totalElements\n      siteImg\n\n      ByFunctions {\n            FunctionalityName\n            Errors {\n              code\n              message\n              context\n              selectors\n              description\n              recommended_action\n              screenshotUrl\n            } \n      }\n      scriptCheckResult\n      techStack {\n        technologies\n        categorizedTechnologies {\n          category\n          technologies\n        }\n        confidence\n        accessibilityContext {\n          platform\n          platform_type\n          has_cms\n          has_ecommerce\n          has_framework\n          is_spa\n        }\n        analyzedUrl\n        analyzedAt\n        source\n      }\n      issues {\n        functionality\n        impact\n        message\n        context\n        selectors\n        description\n        recommended_action\n        screenshotUrl\n      }\n      issuesByFunction\n      functionalityNames\n      totalStats\n    }\n  }\n": typeof types.GetAccessibilityReportDocument,
    "\n  mutation deleteAccessibilityReport($r2_key: String!) {\n    deleteAccessibilityReport(r2_key: $r2_key)\n  }\n": typeof types.DeleteAccessibilityReportDocument,
    "\n  query fetchAccessibilityReportFromR2($url: String!, $created_at: String, $updated_at: String) {\n    fetchAccessibilityReportFromR2(url: $url, created_at: $created_at, updated_at: $updated_at) {\n      url\n      r2_key\n      created_at\n      score\n    }\n  }\n": typeof types.FetchAccessibilityReportFromR2Document,
    "\n  query fetchReportByR2Key($r2_key: String!) {\n    fetchReportByR2Key(r2_key: $r2_key) {\n      axe {\n        errors {\n          message\n          context\n          selectors\n          impact\n          description\n          help\n          screenshotUrl\n        }\n        notices {\n          message\n          context\n          selectors\n          impact\n          description\n          help\n          screenshotUrl\n        }\n        warnings {\n          message\n          context\n          selectors\n          impact\n          description\n          help\n          screenshotUrl\n        }\n      }\n      htmlcs {\n        errors {\n          code\n          message\n          context\n          selectors\n          description\n          recommended_action\n          screenshotUrl\n        }\n        notices {\n          code\n          message\n          context\n          selectors\n          description\n          recommended_action\n          screenshotUrl\n        }\n        warnings {\n          code\n          message\n          context\n          selectors\n          description\n          recommended_action\n          screenshotUrl\n        }\n      }\n      score\n      totalElements\n      siteImg\n\n      ByFunctions {\n            FunctionalityName\n            Errors {\n              code\n              message\n              context\n              selectors\n              description\n              recommended_action\n              screenshotUrl\n            } \n      }\n      scriptCheckResult\n      techStack {\n        technologies\n        categorizedTechnologies {\n          category\n          technologies\n        }\n        confidence\n        accessibilityContext {\n          platform\n          platform_type\n          has_cms\n          has_ecommerce\n          has_framework\n          is_spa\n        }\n        analyzedUrl\n        analyzedAt\n        source\n      }\n      issues {\n        functionality\n        impact\n        message\n        context\n        selectors\n        description\n        recommended_action\n        screenshotUrl\n      }\n      issuesByFunction\n      functionalityNames\n      totalStats\n    }\n  }\n": typeof types.FetchReportByR2KeyDocument,
    "\n  query getAccessibilityReportByJobId($jobId: String!) {\n    getAccessibilityReportByJobId(jobId: $jobId) {\n      status\n      result {\n        reportData {\n          score\n          siteImg\n          techStack {\n            technologies\n            categorizedTechnologies {\n              category\n              technologies\n            }\n            confidence\n            accessibilityContext {\n              platform\n              platform_type\n              has_cms\n              has_ecommerce\n              has_framework\n              is_spa\n            }\n            analyzedUrl\n            analyzedAt\n            source\n          }\n          axe {\n            errors { message context selectors impact description help screenshotUrl }\n            notices { message context selectors impact description help screenshotUrl }\n            warnings { message context selectors impact description help screenshotUrl }\n          }\n          htmlcs {\n            errors { code message context selectors description recommended_action screenshotUrl }\n            notices { code message context selectors description recommended_action screenshotUrl }\n            warnings { code message context selectors description recommended_action screenshotUrl }\n          }\n          ByFunctions {\n            FunctionalityName\n            Errors { code message context selectors description recommended_action screenshotUrl }\n          }\n          scriptCheckResult\n          issues {\n            functionality\n            impact\n            message\n            context\n            selectors\n            description\n            recommended_action\n            screenshotUrl\n          }\n          issuesByFunction\n          functionalityNames\n          totalStats\n        }\n        savedReport {\n          key\n          success\n          report {\n            id\n            url\n            allowed_sites_id\n            r2_key\n            created_at\n            updated_at\n            score\n          }\n        }\n      }\n      error\n    }\n  }\n": typeof types.GetAccessibilityReportByJobIdDocument,
    "\n  mutation SaveAccessibilityReport(\n    $report: JSON!\n    $url: String!\n    $allowed_sites_id: Int\n    $key: String\n    $score: JSON\n  ) {\n    saveAccessibilityReport(\n      report: $report\n      url: $url\n      allowed_sites_id: $allowed_sites_id\n      key: $key\n      score: $score\n    ) {\n      success\n      key\n      report {\n        id\n        url\n        allowed_sites_id\n        r2_key\n        score\n        created_at\n        updated_at\n      }\n    }\n  }\n": typeof types.SaveAccessibilityReportDocument,
    "\n  query startAccessibilityReportJob($url: String!) {\n    startAccessibilityReportJob(url: $url) {\n      jobId\n    }\n  }\n": typeof types.StartAccessibilityReportJobDocument,
    "\n  query IsDomainAlreadyAdded($url: String!) {\n    isDomainAlreadyAdded(url: $url)\n  }\n": typeof types.IsDomainAlreadyAddedDocument,
    "\n  mutation ChangePassword($currentPassword: String!, $newPassword: String!) {\n    changePassword(currentPassword: $currentPassword, newPassword: $newPassword)\n  }\n": typeof types.ChangePasswordDocument,
    "\n  mutation ForgotPassword($email: String!) {\n    forgotPassword(email: $email)\n  }\n": typeof types.ForgotPasswordDocument,
    "\n  query GetProfile {\n    profileUser {\n      id\n      email\n      name\n      isActive\n      company\n      position\n      avatarUrl\n      invitationToken\n      currentOrganization {\n        id\n        name\n        domain\n        logo_url\n        settings\n        created_at\n        updated_at\n      }\n    }\n  }\n": typeof types.GetProfileDocument,
    "\n  mutation Login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      url\n    }\n  }\n": typeof types.LoginDocument,
    "\n  mutation Logout {\n    logout\n  }\n": typeof types.LogoutDocument,
    "\n  mutation Register($email: String!, $password: String!, $name: String!) {\n    register(email: $email, password: $password, name: $name) {\n      token\n    }\n  }\n": typeof types.RegisterDocument,
    "\n  mutation ResendVerification {\n    resendEmail(type: VERIFY_EMAIL)\n  }\n": typeof types.ResendVerificationDocument,
    "\n  mutation ResetPassword(\n    $token: String!\n    $password: String!\n    $confirmPassword: String!\n  ) {\n    resetPassword(\n      token: $token\n      password: $password\n      confirmPassword: $confirmPassword\n    )\n  }\n": typeof types.ResetPasswordDocument,
    "\n  mutation VerifyToken($token: String!) {\n    verify(token: $token)\n  }\n": typeof types.VerifyTokenDocument,
    "\n  query fetchDashboardQuery($url: String!, $startDate: String!, $endDate: String!) {\n    getSiteVisitorsByURL(url: $url) {\n        count\n      }\n    \n    getImpressionsByURLAndDate(url: $url, startDate: $startDate, endDate: $endDate){\n        impressions{\n            widget_opened,\n            widget_closed,\n            createdAt,\n            id,\n            site_id,\n            profileCounts\n        }\n    }\n\n    getEngagementRates(url: $url, startDate: $startDate, endDate: $endDate){\n      totalEngagements,\n      totalImpressions\n      engagementRate,\n      date\n    }\n  }\n": typeof types.FetchDashboardQueryDocument,
    "\n  query GetOrganizationByDomain {\n    getOrganizationByDomain {\n      id\n      name\n      domain\n      favicon\n      logo_url\n      settings\n      created_at\n      updated_at\n    }\n  }\n": typeof types.GetOrganizationByDomainDocument,
    "\n  query GetPlanBySiteIdAndUserId($siteId: Int!) {\n    getPlanBySiteIdAndUserId(siteId: $siteId) {\n      id,\n      siteId,\n      productId,\n      priceId,\n      subcriptionId,\n      customerId,\n      isTrial,\n      expiredAt,\n      isActive,\n      createdAt,\n      updatedAt,\n      deletedAt,\n      siteName,\n      productType,\n      amount,\n      priceType\n    }\n  }\n": typeof types.GetPlanBySiteIdAndUserIdDocument,
    "\n  mutation UpdateSitesPlan($sitesPlanId: Int!, $planName: String!, $billingType: BillingType!) {\n    updateSitesPlan(sitesPlanId: $sitesPlanId, planName: $planName, billingType: $billingType)\n  }\n": typeof types.UpdateSitesPlanDocument,
    "\n  mutation addSite($url: String!) {\n    addSite(url:$url)\n  }\n": typeof types.AddSiteDocument,
    "\n  mutation deleteSite($url: String!) {\n    deleteSite(url:$url)\n  }\n": typeof types.DeleteSiteDocument,
    "\n  query GetUserSites {\n    getUserSites{\n      url,\n      id,\n      expiredAt,\n      trial\n    }\n  }\n": typeof types.GetUserSitesDocument,
    "\n  mutation updateSite($url: String!, $siteId: Int!) {\n    changeURL(newURL:$url, siteId: $siteId)\n  }\n": typeof types.UpdateSiteDocument,
    "\n  mutation TranslateStatement(\n    $content: String!\n    $targetLanguage: String!\n    $languageCode: String!\n    $context: String\n  ) {\n    translateStatement(\n      content: $content\n      targetLanguage: $targetLanguage\n      languageCode: $languageCode\n      context: $context\n    ) {\n      success\n      translatedContent\n      error\n      languageCode\n    }\n  }\n": typeof types.TranslateStatementDocument,
    "\n  mutation deleteAccount {\n    deleteAccount\n  }\n": typeof types.DeleteAccountDocument,
    "\n  mutation UpdateProfile($name: String, $company: String, $position: String) {\n    updateProfile(name: $name, company: $company, position: $position)\n  }\n": typeof types.UpdateProfileDocument,
};
const documents: Documents = {
    "\n  query getAccessibilityReport($url: String!) {\n    getAccessibilityReport(url: $url) {\n      axe {\n        errors {\n          message\n          context\n          selectors\n          impact\n          description\n          help\n          screenshotUrl\n        }\n        notices {\n          message\n          context\n          selectors\n          impact\n          description\n          help\n          screenshotUrl\n        }\n        warnings {\n          message\n          context\n          selectors\n          impact\n          description\n          help\n          screenshotUrl\n        }\n      }\n      htmlcs {\n        errors {\n          code\n          message\n          context\n          selectors\n          description\n          recommended_action\n          screenshotUrl\n        }\n        notices {\n          code\n          message\n          context\n          selectors\n          description\n          recommended_action\n          screenshotUrl\n        }\n        warnings {\n          code\n          message\n          context\n          selectors\n          description\n          recommended_action\n          screenshotUrl\n        }\n      }\n      score\n      totalElements\n      siteImg\n\n      ByFunctions {\n            FunctionalityName\n            Errors {\n              code\n              message\n              context\n              selectors\n              description\n              recommended_action\n              screenshotUrl\n            } \n      }\n      scriptCheckResult\n      techStack {\n        technologies\n        categorizedTechnologies {\n          category\n          technologies\n        }\n        confidence\n        accessibilityContext {\n          platform\n          platform_type\n          has_cms\n          has_ecommerce\n          has_framework\n          is_spa\n        }\n        analyzedUrl\n        analyzedAt\n        source\n      }\n      issues {\n        functionality\n        impact\n        message\n        context\n        selectors\n        description\n        recommended_action\n        screenshotUrl\n      }\n      issuesByFunction\n      functionalityNames\n      totalStats\n    }\n  }\n": types.GetAccessibilityReportDocument,
    "\n  mutation deleteAccessibilityReport($r2_key: String!) {\n    deleteAccessibilityReport(r2_key: $r2_key)\n  }\n": types.DeleteAccessibilityReportDocument,
    "\n  query fetchAccessibilityReportFromR2($url: String!, $created_at: String, $updated_at: String) {\n    fetchAccessibilityReportFromR2(url: $url, created_at: $created_at, updated_at: $updated_at) {\n      url\n      r2_key\n      created_at\n      score\n    }\n  }\n": types.FetchAccessibilityReportFromR2Document,
    "\n  query fetchReportByR2Key($r2_key: String!) {\n    fetchReportByR2Key(r2_key: $r2_key) {\n      axe {\n        errors {\n          message\n          context\n          selectors\n          impact\n          description\n          help\n          screenshotUrl\n        }\n        notices {\n          message\n          context\n          selectors\n          impact\n          description\n          help\n          screenshotUrl\n        }\n        warnings {\n          message\n          context\n          selectors\n          impact\n          description\n          help\n          screenshotUrl\n        }\n      }\n      htmlcs {\n        errors {\n          code\n          message\n          context\n          selectors\n          description\n          recommended_action\n          screenshotUrl\n        }\n        notices {\n          code\n          message\n          context\n          selectors\n          description\n          recommended_action\n          screenshotUrl\n        }\n        warnings {\n          code\n          message\n          context\n          selectors\n          description\n          recommended_action\n          screenshotUrl\n        }\n      }\n      score\n      totalElements\n      siteImg\n\n      ByFunctions {\n            FunctionalityName\n            Errors {\n              code\n              message\n              context\n              selectors\n              description\n              recommended_action\n              screenshotUrl\n            } \n      }\n      scriptCheckResult\n      techStack {\n        technologies\n        categorizedTechnologies {\n          category\n          technologies\n        }\n        confidence\n        accessibilityContext {\n          platform\n          platform_type\n          has_cms\n          has_ecommerce\n          has_framework\n          is_spa\n        }\n        analyzedUrl\n        analyzedAt\n        source\n      }\n      issues {\n        functionality\n        impact\n        message\n        context\n        selectors\n        description\n        recommended_action\n        screenshotUrl\n      }\n      issuesByFunction\n      functionalityNames\n      totalStats\n    }\n  }\n": types.FetchReportByR2KeyDocument,
    "\n  query getAccessibilityReportByJobId($jobId: String!) {\n    getAccessibilityReportByJobId(jobId: $jobId) {\n      status\n      result {\n        reportData {\n          score\n          siteImg\n          techStack {\n            technologies\n            categorizedTechnologies {\n              category\n              technologies\n            }\n            confidence\n            accessibilityContext {\n              platform\n              platform_type\n              has_cms\n              has_ecommerce\n              has_framework\n              is_spa\n            }\n            analyzedUrl\n            analyzedAt\n            source\n          }\n          axe {\n            errors { message context selectors impact description help screenshotUrl }\n            notices { message context selectors impact description help screenshotUrl }\n            warnings { message context selectors impact description help screenshotUrl }\n          }\n          htmlcs {\n            errors { code message context selectors description recommended_action screenshotUrl }\n            notices { code message context selectors description recommended_action screenshotUrl }\n            warnings { code message context selectors description recommended_action screenshotUrl }\n          }\n          ByFunctions {\n            FunctionalityName\n            Errors { code message context selectors description recommended_action screenshotUrl }\n          }\n          scriptCheckResult\n          issues {\n            functionality\n            impact\n            message\n            context\n            selectors\n            description\n            recommended_action\n            screenshotUrl\n          }\n          issuesByFunction\n          functionalityNames\n          totalStats\n        }\n        savedReport {\n          key\n          success\n          report {\n            id\n            url\n            allowed_sites_id\n            r2_key\n            created_at\n            updated_at\n            score\n          }\n        }\n      }\n      error\n    }\n  }\n": types.GetAccessibilityReportByJobIdDocument,
    "\n  mutation SaveAccessibilityReport(\n    $report: JSON!\n    $url: String!\n    $allowed_sites_id: Int\n    $key: String\n    $score: JSON\n  ) {\n    saveAccessibilityReport(\n      report: $report\n      url: $url\n      allowed_sites_id: $allowed_sites_id\n      key: $key\n      score: $score\n    ) {\n      success\n      key\n      report {\n        id\n        url\n        allowed_sites_id\n        r2_key\n        score\n        created_at\n        updated_at\n      }\n    }\n  }\n": types.SaveAccessibilityReportDocument,
    "\n  query startAccessibilityReportJob($url: String!) {\n    startAccessibilityReportJob(url: $url) {\n      jobId\n    }\n  }\n": types.StartAccessibilityReportJobDocument,
    "\n  query IsDomainAlreadyAdded($url: String!) {\n    isDomainAlreadyAdded(url: $url)\n  }\n": types.IsDomainAlreadyAddedDocument,
    "\n  mutation ChangePassword($currentPassword: String!, $newPassword: String!) {\n    changePassword(currentPassword: $currentPassword, newPassword: $newPassword)\n  }\n": types.ChangePasswordDocument,
    "\n  mutation ForgotPassword($email: String!) {\n    forgotPassword(email: $email)\n  }\n": types.ForgotPasswordDocument,
    "\n  query GetProfile {\n    profileUser {\n      id\n      email\n      name\n      isActive\n      company\n      position\n      avatarUrl\n      invitationToken\n      currentOrganization {\n        id\n        name\n        domain\n        logo_url\n        settings\n        created_at\n        updated_at\n      }\n    }\n  }\n": types.GetProfileDocument,
    "\n  mutation Login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      url\n    }\n  }\n": types.LoginDocument,
    "\n  mutation Logout {\n    logout\n  }\n": types.LogoutDocument,
    "\n  mutation Register($email: String!, $password: String!, $name: String!) {\n    register(email: $email, password: $password, name: $name) {\n      token\n    }\n  }\n": types.RegisterDocument,
    "\n  mutation ResendVerification {\n    resendEmail(type: VERIFY_EMAIL)\n  }\n": types.ResendVerificationDocument,
    "\n  mutation ResetPassword(\n    $token: String!\n    $password: String!\n    $confirmPassword: String!\n  ) {\n    resetPassword(\n      token: $token\n      password: $password\n      confirmPassword: $confirmPassword\n    )\n  }\n": types.ResetPasswordDocument,
    "\n  mutation VerifyToken($token: String!) {\n    verify(token: $token)\n  }\n": types.VerifyTokenDocument,
    "\n  query fetchDashboardQuery($url: String!, $startDate: String!, $endDate: String!) {\n    getSiteVisitorsByURL(url: $url) {\n        count\n      }\n    \n    getImpressionsByURLAndDate(url: $url, startDate: $startDate, endDate: $endDate){\n        impressions{\n            widget_opened,\n            widget_closed,\n            createdAt,\n            id,\n            site_id,\n            profileCounts\n        }\n    }\n\n    getEngagementRates(url: $url, startDate: $startDate, endDate: $endDate){\n      totalEngagements,\n      totalImpressions\n      engagementRate,\n      date\n    }\n  }\n": types.FetchDashboardQueryDocument,
    "\n  query GetOrganizationByDomain {\n    getOrganizationByDomain {\n      id\n      name\n      domain\n      favicon\n      logo_url\n      settings\n      created_at\n      updated_at\n    }\n  }\n": types.GetOrganizationByDomainDocument,
    "\n  query GetPlanBySiteIdAndUserId($siteId: Int!) {\n    getPlanBySiteIdAndUserId(siteId: $siteId) {\n      id,\n      siteId,\n      productId,\n      priceId,\n      subcriptionId,\n      customerId,\n      isTrial,\n      expiredAt,\n      isActive,\n      createdAt,\n      updatedAt,\n      deletedAt,\n      siteName,\n      productType,\n      amount,\n      priceType\n    }\n  }\n": types.GetPlanBySiteIdAndUserIdDocument,
    "\n  mutation UpdateSitesPlan($sitesPlanId: Int!, $planName: String!, $billingType: BillingType!) {\n    updateSitesPlan(sitesPlanId: $sitesPlanId, planName: $planName, billingType: $billingType)\n  }\n": types.UpdateSitesPlanDocument,
    "\n  mutation addSite($url: String!) {\n    addSite(url:$url)\n  }\n": types.AddSiteDocument,
    "\n  mutation deleteSite($url: String!) {\n    deleteSite(url:$url)\n  }\n": types.DeleteSiteDocument,
    "\n  query GetUserSites {\n    getUserSites{\n      url,\n      id,\n      expiredAt,\n      trial\n    }\n  }\n": types.GetUserSitesDocument,
    "\n  mutation updateSite($url: String!, $siteId: Int!) {\n    changeURL(newURL:$url, siteId: $siteId)\n  }\n": types.UpdateSiteDocument,
    "\n  mutation TranslateStatement(\n    $content: String!\n    $targetLanguage: String!\n    $languageCode: String!\n    $context: String\n  ) {\n    translateStatement(\n      content: $content\n      targetLanguage: $targetLanguage\n      languageCode: $languageCode\n      context: $context\n    ) {\n      success\n      translatedContent\n      error\n      languageCode\n    }\n  }\n": types.TranslateStatementDocument,
    "\n  mutation deleteAccount {\n    deleteAccount\n  }\n": types.DeleteAccountDocument,
    "\n  mutation UpdateProfile($name: String, $company: String, $position: String) {\n    updateProfile(name: $name, company: $company, position: $position)\n  }\n": types.UpdateProfileDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getAccessibilityReport($url: String!) {\n    getAccessibilityReport(url: $url) {\n      axe {\n        errors {\n          message\n          context\n          selectors\n          impact\n          description\n          help\n          screenshotUrl\n        }\n        notices {\n          message\n          context\n          selectors\n          impact\n          description\n          help\n          screenshotUrl\n        }\n        warnings {\n          message\n          context\n          selectors\n          impact\n          description\n          help\n          screenshotUrl\n        }\n      }\n      htmlcs {\n        errors {\n          code\n          message\n          context\n          selectors\n          description\n          recommended_action\n          screenshotUrl\n        }\n        notices {\n          code\n          message\n          context\n          selectors\n          description\n          recommended_action\n          screenshotUrl\n        }\n        warnings {\n          code\n          message\n          context\n          selectors\n          description\n          recommended_action\n          screenshotUrl\n        }\n      }\n      score\n      totalElements\n      siteImg\n\n      ByFunctions {\n            FunctionalityName\n            Errors {\n              code\n              message\n              context\n              selectors\n              description\n              recommended_action\n              screenshotUrl\n            } \n      }\n      scriptCheckResult\n      techStack {\n        technologies\n        categorizedTechnologies {\n          category\n          technologies\n        }\n        confidence\n        accessibilityContext {\n          platform\n          platform_type\n          has_cms\n          has_ecommerce\n          has_framework\n          is_spa\n        }\n        analyzedUrl\n        analyzedAt\n        source\n      }\n      issues {\n        functionality\n        impact\n        message\n        context\n        selectors\n        description\n        recommended_action\n        screenshotUrl\n      }\n      issuesByFunction\n      functionalityNames\n      totalStats\n    }\n  }\n"): (typeof documents)["\n  query getAccessibilityReport($url: String!) {\n    getAccessibilityReport(url: $url) {\n      axe {\n        errors {\n          message\n          context\n          selectors\n          impact\n          description\n          help\n          screenshotUrl\n        }\n        notices {\n          message\n          context\n          selectors\n          impact\n          description\n          help\n          screenshotUrl\n        }\n        warnings {\n          message\n          context\n          selectors\n          impact\n          description\n          help\n          screenshotUrl\n        }\n      }\n      htmlcs {\n        errors {\n          code\n          message\n          context\n          selectors\n          description\n          recommended_action\n          screenshotUrl\n        }\n        notices {\n          code\n          message\n          context\n          selectors\n          description\n          recommended_action\n          screenshotUrl\n        }\n        warnings {\n          code\n          message\n          context\n          selectors\n          description\n          recommended_action\n          screenshotUrl\n        }\n      }\n      score\n      totalElements\n      siteImg\n\n      ByFunctions {\n            FunctionalityName\n            Errors {\n              code\n              message\n              context\n              selectors\n              description\n              recommended_action\n              screenshotUrl\n            } \n      }\n      scriptCheckResult\n      techStack {\n        technologies\n        categorizedTechnologies {\n          category\n          technologies\n        }\n        confidence\n        accessibilityContext {\n          platform\n          platform_type\n          has_cms\n          has_ecommerce\n          has_framework\n          is_spa\n        }\n        analyzedUrl\n        analyzedAt\n        source\n      }\n      issues {\n        functionality\n        impact\n        message\n        context\n        selectors\n        description\n        recommended_action\n        screenshotUrl\n      }\n      issuesByFunction\n      functionalityNames\n      totalStats\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation deleteAccessibilityReport($r2_key: String!) {\n    deleteAccessibilityReport(r2_key: $r2_key)\n  }\n"): (typeof documents)["\n  mutation deleteAccessibilityReport($r2_key: String!) {\n    deleteAccessibilityReport(r2_key: $r2_key)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query fetchAccessibilityReportFromR2($url: String!, $created_at: String, $updated_at: String) {\n    fetchAccessibilityReportFromR2(url: $url, created_at: $created_at, updated_at: $updated_at) {\n      url\n      r2_key\n      created_at\n      score\n    }\n  }\n"): (typeof documents)["\n  query fetchAccessibilityReportFromR2($url: String!, $created_at: String, $updated_at: String) {\n    fetchAccessibilityReportFromR2(url: $url, created_at: $created_at, updated_at: $updated_at) {\n      url\n      r2_key\n      created_at\n      score\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query fetchReportByR2Key($r2_key: String!) {\n    fetchReportByR2Key(r2_key: $r2_key) {\n      axe {\n        errors {\n          message\n          context\n          selectors\n          impact\n          description\n          help\n          screenshotUrl\n        }\n        notices {\n          message\n          context\n          selectors\n          impact\n          description\n          help\n          screenshotUrl\n        }\n        warnings {\n          message\n          context\n          selectors\n          impact\n          description\n          help\n          screenshotUrl\n        }\n      }\n      htmlcs {\n        errors {\n          code\n          message\n          context\n          selectors\n          description\n          recommended_action\n          screenshotUrl\n        }\n        notices {\n          code\n          message\n          context\n          selectors\n          description\n          recommended_action\n          screenshotUrl\n        }\n        warnings {\n          code\n          message\n          context\n          selectors\n          description\n          recommended_action\n          screenshotUrl\n        }\n      }\n      score\n      totalElements\n      siteImg\n\n      ByFunctions {\n            FunctionalityName\n            Errors {\n              code\n              message\n              context\n              selectors\n              description\n              recommended_action\n              screenshotUrl\n            } \n      }\n      scriptCheckResult\n      techStack {\n        technologies\n        categorizedTechnologies {\n          category\n          technologies\n        }\n        confidence\n        accessibilityContext {\n          platform\n          platform_type\n          has_cms\n          has_ecommerce\n          has_framework\n          is_spa\n        }\n        analyzedUrl\n        analyzedAt\n        source\n      }\n      issues {\n        functionality\n        impact\n        message\n        context\n        selectors\n        description\n        recommended_action\n        screenshotUrl\n      }\n      issuesByFunction\n      functionalityNames\n      totalStats\n    }\n  }\n"): (typeof documents)["\n  query fetchReportByR2Key($r2_key: String!) {\n    fetchReportByR2Key(r2_key: $r2_key) {\n      axe {\n        errors {\n          message\n          context\n          selectors\n          impact\n          description\n          help\n          screenshotUrl\n        }\n        notices {\n          message\n          context\n          selectors\n          impact\n          description\n          help\n          screenshotUrl\n        }\n        warnings {\n          message\n          context\n          selectors\n          impact\n          description\n          help\n          screenshotUrl\n        }\n      }\n      htmlcs {\n        errors {\n          code\n          message\n          context\n          selectors\n          description\n          recommended_action\n          screenshotUrl\n        }\n        notices {\n          code\n          message\n          context\n          selectors\n          description\n          recommended_action\n          screenshotUrl\n        }\n        warnings {\n          code\n          message\n          context\n          selectors\n          description\n          recommended_action\n          screenshotUrl\n        }\n      }\n      score\n      totalElements\n      siteImg\n\n      ByFunctions {\n            FunctionalityName\n            Errors {\n              code\n              message\n              context\n              selectors\n              description\n              recommended_action\n              screenshotUrl\n            } \n      }\n      scriptCheckResult\n      techStack {\n        technologies\n        categorizedTechnologies {\n          category\n          technologies\n        }\n        confidence\n        accessibilityContext {\n          platform\n          platform_type\n          has_cms\n          has_ecommerce\n          has_framework\n          is_spa\n        }\n        analyzedUrl\n        analyzedAt\n        source\n      }\n      issues {\n        functionality\n        impact\n        message\n        context\n        selectors\n        description\n        recommended_action\n        screenshotUrl\n      }\n      issuesByFunction\n      functionalityNames\n      totalStats\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getAccessibilityReportByJobId($jobId: String!) {\n    getAccessibilityReportByJobId(jobId: $jobId) {\n      status\n      result {\n        reportData {\n          score\n          siteImg\n          techStack {\n            technologies\n            categorizedTechnologies {\n              category\n              technologies\n            }\n            confidence\n            accessibilityContext {\n              platform\n              platform_type\n              has_cms\n              has_ecommerce\n              has_framework\n              is_spa\n            }\n            analyzedUrl\n            analyzedAt\n            source\n          }\n          axe {\n            errors { message context selectors impact description help screenshotUrl }\n            notices { message context selectors impact description help screenshotUrl }\n            warnings { message context selectors impact description help screenshotUrl }\n          }\n          htmlcs {\n            errors { code message context selectors description recommended_action screenshotUrl }\n            notices { code message context selectors description recommended_action screenshotUrl }\n            warnings { code message context selectors description recommended_action screenshotUrl }\n          }\n          ByFunctions {\n            FunctionalityName\n            Errors { code message context selectors description recommended_action screenshotUrl }\n          }\n          scriptCheckResult\n          issues {\n            functionality\n            impact\n            message\n            context\n            selectors\n            description\n            recommended_action\n            screenshotUrl\n          }\n          issuesByFunction\n          functionalityNames\n          totalStats\n        }\n        savedReport {\n          key\n          success\n          report {\n            id\n            url\n            allowed_sites_id\n            r2_key\n            created_at\n            updated_at\n            score\n          }\n        }\n      }\n      error\n    }\n  }\n"): (typeof documents)["\n  query getAccessibilityReportByJobId($jobId: String!) {\n    getAccessibilityReportByJobId(jobId: $jobId) {\n      status\n      result {\n        reportData {\n          score\n          siteImg\n          techStack {\n            technologies\n            categorizedTechnologies {\n              category\n              technologies\n            }\n            confidence\n            accessibilityContext {\n              platform\n              platform_type\n              has_cms\n              has_ecommerce\n              has_framework\n              is_spa\n            }\n            analyzedUrl\n            analyzedAt\n            source\n          }\n          axe {\n            errors { message context selectors impact description help screenshotUrl }\n            notices { message context selectors impact description help screenshotUrl }\n            warnings { message context selectors impact description help screenshotUrl }\n          }\n          htmlcs {\n            errors { code message context selectors description recommended_action screenshotUrl }\n            notices { code message context selectors description recommended_action screenshotUrl }\n            warnings { code message context selectors description recommended_action screenshotUrl }\n          }\n          ByFunctions {\n            FunctionalityName\n            Errors { code message context selectors description recommended_action screenshotUrl }\n          }\n          scriptCheckResult\n          issues {\n            functionality\n            impact\n            message\n            context\n            selectors\n            description\n            recommended_action\n            screenshotUrl\n          }\n          issuesByFunction\n          functionalityNames\n          totalStats\n        }\n        savedReport {\n          key\n          success\n          report {\n            id\n            url\n            allowed_sites_id\n            r2_key\n            created_at\n            updated_at\n            score\n          }\n        }\n      }\n      error\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation SaveAccessibilityReport(\n    $report: JSON!\n    $url: String!\n    $allowed_sites_id: Int\n    $key: String\n    $score: JSON\n  ) {\n    saveAccessibilityReport(\n      report: $report\n      url: $url\n      allowed_sites_id: $allowed_sites_id\n      key: $key\n      score: $score\n    ) {\n      success\n      key\n      report {\n        id\n        url\n        allowed_sites_id\n        r2_key\n        score\n        created_at\n        updated_at\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation SaveAccessibilityReport(\n    $report: JSON!\n    $url: String!\n    $allowed_sites_id: Int\n    $key: String\n    $score: JSON\n  ) {\n    saveAccessibilityReport(\n      report: $report\n      url: $url\n      allowed_sites_id: $allowed_sites_id\n      key: $key\n      score: $score\n    ) {\n      success\n      key\n      report {\n        id\n        url\n        allowed_sites_id\n        r2_key\n        score\n        created_at\n        updated_at\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query startAccessibilityReportJob($url: String!) {\n    startAccessibilityReportJob(url: $url) {\n      jobId\n    }\n  }\n"): (typeof documents)["\n  query startAccessibilityReportJob($url: String!) {\n    startAccessibilityReportJob(url: $url) {\n      jobId\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query IsDomainAlreadyAdded($url: String!) {\n    isDomainAlreadyAdded(url: $url)\n  }\n"): (typeof documents)["\n  query IsDomainAlreadyAdded($url: String!) {\n    isDomainAlreadyAdded(url: $url)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ChangePassword($currentPassword: String!, $newPassword: String!) {\n    changePassword(currentPassword: $currentPassword, newPassword: $newPassword)\n  }\n"): (typeof documents)["\n  mutation ChangePassword($currentPassword: String!, $newPassword: String!) {\n    changePassword(currentPassword: $currentPassword, newPassword: $newPassword)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ForgotPassword($email: String!) {\n    forgotPassword(email: $email)\n  }\n"): (typeof documents)["\n  mutation ForgotPassword($email: String!) {\n    forgotPassword(email: $email)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetProfile {\n    profileUser {\n      id\n      email\n      name\n      isActive\n      company\n      position\n      avatarUrl\n      invitationToken\n      currentOrganization {\n        id\n        name\n        domain\n        logo_url\n        settings\n        created_at\n        updated_at\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetProfile {\n    profileUser {\n      id\n      email\n      name\n      isActive\n      company\n      position\n      avatarUrl\n      invitationToken\n      currentOrganization {\n        id\n        name\n        domain\n        logo_url\n        settings\n        created_at\n        updated_at\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation Login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      url\n    }\n  }\n"): (typeof documents)["\n  mutation Login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      url\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation Logout {\n    logout\n  }\n"): (typeof documents)["\n  mutation Logout {\n    logout\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation Register($email: String!, $password: String!, $name: String!) {\n    register(email: $email, password: $password, name: $name) {\n      token\n    }\n  }\n"): (typeof documents)["\n  mutation Register($email: String!, $password: String!, $name: String!) {\n    register(email: $email, password: $password, name: $name) {\n      token\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ResendVerification {\n    resendEmail(type: VERIFY_EMAIL)\n  }\n"): (typeof documents)["\n  mutation ResendVerification {\n    resendEmail(type: VERIFY_EMAIL)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ResetPassword(\n    $token: String!\n    $password: String!\n    $confirmPassword: String!\n  ) {\n    resetPassword(\n      token: $token\n      password: $password\n      confirmPassword: $confirmPassword\n    )\n  }\n"): (typeof documents)["\n  mutation ResetPassword(\n    $token: String!\n    $password: String!\n    $confirmPassword: String!\n  ) {\n    resetPassword(\n      token: $token\n      password: $password\n      confirmPassword: $confirmPassword\n    )\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation VerifyToken($token: String!) {\n    verify(token: $token)\n  }\n"): (typeof documents)["\n  mutation VerifyToken($token: String!) {\n    verify(token: $token)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query fetchDashboardQuery($url: String!, $startDate: String!, $endDate: String!) {\n    getSiteVisitorsByURL(url: $url) {\n        count\n      }\n    \n    getImpressionsByURLAndDate(url: $url, startDate: $startDate, endDate: $endDate){\n        impressions{\n            widget_opened,\n            widget_closed,\n            createdAt,\n            id,\n            site_id,\n            profileCounts\n        }\n    }\n\n    getEngagementRates(url: $url, startDate: $startDate, endDate: $endDate){\n      totalEngagements,\n      totalImpressions\n      engagementRate,\n      date\n    }\n  }\n"): (typeof documents)["\n  query fetchDashboardQuery($url: String!, $startDate: String!, $endDate: String!) {\n    getSiteVisitorsByURL(url: $url) {\n        count\n      }\n    \n    getImpressionsByURLAndDate(url: $url, startDate: $startDate, endDate: $endDate){\n        impressions{\n            widget_opened,\n            widget_closed,\n            createdAt,\n            id,\n            site_id,\n            profileCounts\n        }\n    }\n\n    getEngagementRates(url: $url, startDate: $startDate, endDate: $endDate){\n      totalEngagements,\n      totalImpressions\n      engagementRate,\n      date\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetOrganizationByDomain {\n    getOrganizationByDomain {\n      id\n      name\n      domain\n      favicon\n      logo_url\n      settings\n      created_at\n      updated_at\n    }\n  }\n"): (typeof documents)["\n  query GetOrganizationByDomain {\n    getOrganizationByDomain {\n      id\n      name\n      domain\n      favicon\n      logo_url\n      settings\n      created_at\n      updated_at\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetPlanBySiteIdAndUserId($siteId: Int!) {\n    getPlanBySiteIdAndUserId(siteId: $siteId) {\n      id,\n      siteId,\n      productId,\n      priceId,\n      subcriptionId,\n      customerId,\n      isTrial,\n      expiredAt,\n      isActive,\n      createdAt,\n      updatedAt,\n      deletedAt,\n      siteName,\n      productType,\n      amount,\n      priceType\n    }\n  }\n"): (typeof documents)["\n  query GetPlanBySiteIdAndUserId($siteId: Int!) {\n    getPlanBySiteIdAndUserId(siteId: $siteId) {\n      id,\n      siteId,\n      productId,\n      priceId,\n      subcriptionId,\n      customerId,\n      isTrial,\n      expiredAt,\n      isActive,\n      createdAt,\n      updatedAt,\n      deletedAt,\n      siteName,\n      productType,\n      amount,\n      priceType\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateSitesPlan($sitesPlanId: Int!, $planName: String!, $billingType: BillingType!) {\n    updateSitesPlan(sitesPlanId: $sitesPlanId, planName: $planName, billingType: $billingType)\n  }\n"): (typeof documents)["\n  mutation UpdateSitesPlan($sitesPlanId: Int!, $planName: String!, $billingType: BillingType!) {\n    updateSitesPlan(sitesPlanId: $sitesPlanId, planName: $planName, billingType: $billingType)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation addSite($url: String!) {\n    addSite(url:$url)\n  }\n"): (typeof documents)["\n  mutation addSite($url: String!) {\n    addSite(url:$url)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation deleteSite($url: String!) {\n    deleteSite(url:$url)\n  }\n"): (typeof documents)["\n  mutation deleteSite($url: String!) {\n    deleteSite(url:$url)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetUserSites {\n    getUserSites{\n      url,\n      id,\n      expiredAt,\n      trial\n    }\n  }\n"): (typeof documents)["\n  query GetUserSites {\n    getUserSites{\n      url,\n      id,\n      expiredAt,\n      trial\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation updateSite($url: String!, $siteId: Int!) {\n    changeURL(newURL:$url, siteId: $siteId)\n  }\n"): (typeof documents)["\n  mutation updateSite($url: String!, $siteId: Int!) {\n    changeURL(newURL:$url, siteId: $siteId)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation TranslateStatement(\n    $content: String!\n    $targetLanguage: String!\n    $languageCode: String!\n    $context: String\n  ) {\n    translateStatement(\n      content: $content\n      targetLanguage: $targetLanguage\n      languageCode: $languageCode\n      context: $context\n    ) {\n      success\n      translatedContent\n      error\n      languageCode\n    }\n  }\n"): (typeof documents)["\n  mutation TranslateStatement(\n    $content: String!\n    $targetLanguage: String!\n    $languageCode: String!\n    $context: String\n  ) {\n    translateStatement(\n      content: $content\n      targetLanguage: $targetLanguage\n      languageCode: $languageCode\n      context: $context\n    ) {\n      success\n      translatedContent\n      error\n      languageCode\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation deleteAccount {\n    deleteAccount\n  }\n"): (typeof documents)["\n  mutation deleteAccount {\n    deleteAccount\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateProfile($name: String, $company: String, $position: String) {\n    updateProfile(name: $name, company: $company, position: $position)\n  }\n"): (typeof documents)["\n  mutation UpdateProfile($name: String, $company: String, $position: String) {\n    updateProfile(name: $name, company: $company, position: $position)\n  }\n"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;